datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Novo modelo para Projetos
model Project {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  todos       Todo[] // Relação inversa: um projeto pode ter vários Todos

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Todo {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  state       State
  label       String[] @default([])
  deadline    Int? // Considerar mudar para DateTime?
  isDeleted   Boolean  @default(false)
  order       Int

  ownerId String @db.ObjectId
  owner   User?  @relation(fields: [ownerId], references: [id])

  // Adicionando relação com Projeto
  projectId String? @db.ObjectId // Opcional para permitir Todos sem projeto inicialmente
  project   Project? @relation(fields: [projectId], references: [id])

  // Adicionar campo Assignee (Responsável) aqui se for implementar
  // assigneeId String? @db.ObjectId
  // assignee   User?   @relation(name: "AssignedTodos", fields: [assigneeId], references: [id])

  // Adicionar campo Priority aqui se for implementar
  // priority Priority? @default(MEDIUM)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum State {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
}

// Adicionar enum Priority aqui se for implementar
// enum Priority {
//   LOW
//   MEDIUM
//   HIGH
//   URGENT
// }

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  password      String?   // Adicionado campo para senha
  image         String?
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]

  todos Todo[] // Todos criados pelo usuário (owner)

  // Adicionar relação inversa para Assignee aqui se for implementar
  // assignedTodos Todo[] @relation(name: "AssignedTodos")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.String
  access_token      String?  @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  userId       String   @db.ObjectId
  expires      DateTime
  sessionToken String   @unique

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

